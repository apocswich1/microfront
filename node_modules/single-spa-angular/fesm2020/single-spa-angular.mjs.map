{"version":3,"file":"single-spa-angular.mjs","sources":["../../libs/single-spa-angular/src/prod-mode.ts","../../libs/single-spa-angular/src/extra-providers.ts","../../libs/single-spa-angular/src/single-spa-angular.ts","../../libs/single-spa-angular/index.ts","../../libs/single-spa-angular/single-spa-angular.ts"],"sourcesContent":["import * as core from '@angular/core';\n\nexport function enableProdMode(): void {\n  try {\n    // The `enableProdMode` will throw an error if it's called multiple times,\n    // but it may be called multiple times when dependencies are shared.\n    core.enableProdMode();\n  } catch {\n    // Nothing to do here.\n  }\n}\n","import { Injectable, StaticProvider, Inject } from '@angular/core';\nimport {\n  ɵBrowserPlatformLocation,\n  PlatformLocation,\n  LocationChangeEvent,\n  LocationChangeListener,\n  DOCUMENT,\n} from '@angular/common';\n\ndeclare const Zone: any;\n\n@Injectable()\nexport class SingleSpaPlatformLocation extends ɵBrowserPlatformLocation {\n  // This is a simple marker that helps us to ignore PopStateEvents\n  // that was not dispatched by the browser.\n  private skipNextPopState = false;\n\n  private readonly source = 'Window.addEventListener:popstate';\n\n  pushState(state: any, title: string, url: string): void {\n    this.skipNextPopState = true;\n    super.pushState(state, title, url);\n  }\n\n  replaceState(state: any, title: string, url: string): void {\n    this.skipNextPopState = true;\n    super.replaceState(state, title, url);\n  }\n\n  onPopState(fn: LocationChangeListener): VoidFunction {\n    // `Zone.current` will reference the zone that serves as an execution context\n    // to some specific application, especially when `onPopState` is called.\n    const zone = Zone.current;\n\n    // Wrap any event listener into zone that is specific to some application.\n    // The main issue is `back/forward` buttons of browsers, because they invoke\n    // `history.back|forward` which dispatch `popstate` event. Since `single-spa`\n    // overrides `history.replaceState` Angular's zone cannot intercept this event.\n    // Only the root zone is able to intercept all events.\n    // See https://github.com/single-spa/single-spa-angular/issues/94 for more details\n    fn = zone.wrap(fn, this.source);\n\n    const onPopStateListener = (event: LocationChangeEvent) => {\n      // The `LocationChangeEvent` doesn't have the `singleSpa` property, since it's added\n      // by `single-spa` starting from `5.4` version. We need this check because we want\n      // to skip \"unnatural\" PopStateEvents, the one caused by `single-spa`.\n      const popStateEventWasDispatchedBySingleSpa = !!(event as unknown as { singleSpa: boolean })\n        .singleSpa;\n\n      if (this.skipNextPopState && popStateEventWasDispatchedBySingleSpa) {\n        this.skipNextPopState = false;\n      } else {\n        fn(event);\n      }\n    };\n\n    return super.onPopState(onPopStateListener);\n  }\n}\n\n/**\n * The `PlatformLocation` class is an \"injectee\" of the `PathLocationStrategy`,\n * which creates `Subject` internally for listening on `popstate` events. We want\n * to provide this class in the most top injector that's used during bootstrapping.\n */\nexport function getSingleSpaExtraProviders(): StaticProvider[] {\n  return [\n    {\n      provide: SingleSpaPlatformLocation,\n      deps: [[new Inject(DOCUMENT)]],\n    },\n    {\n      provide: PlatformLocation,\n      useExisting: SingleSpaPlatformLocation,\n    },\n  ];\n}\n","import { NgModuleRef, NgZone } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { LifeCycles } from 'single-spa';\nimport { getContainerElementAndSetTemplate } from 'single-spa-angular/internals';\n\nimport { SingleSpaPlatformLocation } from './extra-providers';\nimport { SingleSpaAngularOptions, BootstrappedSingleSpaAngularOptions } from './types';\n\nconst defaultOptions = {\n  // Required options that will be set by the library consumer.\n  NgZone: null!,\n  bootstrapFunction: null!,\n  template: null!,\n  // Optional options\n  Router: undefined,\n  domElementGetter: undefined, // only optional if you provide a domElementGetter as a custom prop\n  updateFunction: () => Promise.resolve(),\n  bootstrappedModule: null,\n};\n\n// This will be provided through Terser global definitions by Angular CLI. This will\n// help to tree-shake away the code unneeded for production bundles.\ndeclare const ngDevMode: boolean;\n\nconst NG_DEV_MODE = typeof ngDevMode === 'undefined' || ngDevMode;\n\nexport function singleSpaAngular<T>(userOptions: SingleSpaAngularOptions<T>): LifeCycles<T> {\n  if (NG_DEV_MODE && typeof userOptions !== 'object') {\n    throw Error('single-spa-angular requires a configuration object');\n  }\n\n  const options: SingleSpaAngularOptions = {\n    ...defaultOptions,\n    ...userOptions,\n  };\n\n  if (NG_DEV_MODE && typeof options.bootstrapFunction !== 'function') {\n    throw Error('single-spa-angular must be passed an options.bootstrapFunction');\n  }\n\n  if (NG_DEV_MODE && typeof options.template !== 'string') {\n    throw Error('single-spa-angular must be passed options.template string');\n  }\n\n  if (NG_DEV_MODE && !options.NgZone) {\n    throw Error(`single-spa-angular must be passed the NgZone option`);\n  }\n\n  if (NG_DEV_MODE && options.Router && !options.NavigationStart) {\n    // We call `console.warn` except of throwing `new Error()` since this will not\n    // be a breaking change.\n    console.warn(`single-spa-angular must be passed the NavigationStart option`);\n  }\n\n  return {\n    bootstrap: bootstrap.bind(null, options as BootstrappedSingleSpaAngularOptions),\n    mount: mount.bind(null, options),\n    unmount: unmount.bind(null, options as BootstrappedSingleSpaAngularOptions),\n    update: options.updateFunction,\n  };\n}\n\nasync function bootstrap(options: BootstrappedSingleSpaAngularOptions, props: any): Promise<void> {\n  // Angular provides an opportunity to develop `zone-less` application, where developers\n  // have to trigger change detection manually.\n  // See https://angular.io/guide/zone#noopzone\n  if (options.NgZone === 'noop') {\n    return;\n  }\n\n  // In order for multiple Angular apps to work concurrently on a page, they each need a unique identifier.\n  options.zoneIdentifier = `single-spa-angular:${props.name || props.appName}`;\n\n  // This is a hack, since NgZone doesn't allow you to configure the property that identifies your zone.\n  // See https://github.com/PlaceMe-SAS/single-spa-angular-cli/issues/33,\n  // https://github.com/single-spa/single-spa-angular/issues/47,\n  // https://github.com/angular/angular/blob/a14dc2d7a4821a19f20a9547053a5734798f541e/packages/core/src/zone/ng_zone.ts#L144,\n  // and https://github.com/angular/angular/blob/a14dc2d7a4821a19f20a9547053a5734798f541e/packages/core/src/zone/ng_zone.ts#L257\n  options.NgZone.isInAngularZone = () => {\n    // @ts-ignore\n    return window.Zone.current._properties[options.zoneIdentifier] === true;\n  };\n\n  options.routingEventListener = () => {\n    options.bootstrappedNgZone!.run(() => {\n      // See https://github.com/single-spa/single-spa-angular/issues/86\n      // Zone is unaware of the single-spa navigation change and so Angular change detection doesn't work\n      // unless we tell Zone that something happened\n    });\n  };\n}\n\nasync function mount(options: SingleSpaAngularOptions, props: any): Promise<NgModuleRef<any>> {\n  getContainerElementAndSetTemplate(options, props);\n\n  const bootstrapPromise = options.bootstrapFunction(props);\n\n  if (NG_DEV_MODE && !(bootstrapPromise instanceof Promise)) {\n    throw Error(\n      `single-spa-angular: the options.bootstrapFunction must return a promise, but instead returned a '${typeof bootstrapPromise}' that is not a Promise`,\n    );\n  }\n\n  const module: NgModuleRef<any> = await bootstrapPromise;\n\n  if (NG_DEV_MODE) {\n    if (!module || typeof module.destroy !== 'function') {\n      throw Error(\n        `single-spa-angular: the options.bootstrapFunction returned a promise that did not resolve with a valid Angular module. Did you call platformBrowserDynamic().bootstrapModule() correctly?`,\n      );\n    }\n  }\n\n  const singleSpaPlatformLocation: SingleSpaPlatformLocation | null = module.injector.get(\n    SingleSpaPlatformLocation,\n    null,\n  );\n\n  const ngZoneEnabled = options.NgZone !== 'noop';\n\n  // The user has to provide `BrowserPlatformLocation` only if his application uses routing.\n  // So if he provided `Router` but didn't provide `BrowserPlatformLocation` then we have to inform him.\n  // Also `getSingleSpaExtraProviders()` function should be called only if the user doesn't use\n  // `zone-less` change detection, if `NgZone` is `noop` then we can skip it.\n  if (NG_DEV_MODE && ngZoneEnabled && options.Router && singleSpaPlatformLocation === null) {\n    throw new Error(`\n      single-spa-angular: could not retrieve extra providers from the platform injector. Did you call platformBrowserDynamic(getSingleSpaExtraProviders()).bootstrapModule()?\n    `);\n  }\n\n  const bootstrappedOptions = options as BootstrappedSingleSpaAngularOptions;\n\n  if (ngZoneEnabled) {\n    const ngZone: NgZone = module.injector.get(options.NgZone);\n    const zoneIdentifier: string = bootstrappedOptions.zoneIdentifier!;\n\n    // `NgZone` can be enabled but routing may not be used thus `getSingleSpaExtraProviders()`\n    // function was not called.\n    if (singleSpaPlatformLocation !== null) {\n      skipLocationChangeOnNonImperativeRoutingTriggers(module, options);\n    }\n\n    bootstrappedOptions.bootstrappedNgZone = ngZone;\n    bootstrappedOptions.bootstrappedNgZone['_inner']._properties[zoneIdentifier] = true;\n    window.addEventListener('single-spa:routing-event', bootstrappedOptions.routingEventListener!);\n  }\n\n  bootstrappedOptions.bootstrappedModule = module;\n  return module;\n}\n\nfunction unmount(options: BootstrappedSingleSpaAngularOptions): Promise<void> {\n  return Promise.resolve().then(() => {\n    if (options.routingEventListener) {\n      window.removeEventListener('single-spa:routing-event', options.routingEventListener);\n    }\n\n    options.bootstrappedModule!.destroy();\n    options.bootstrappedModule = null;\n  });\n}\n\nfunction skipLocationChangeOnNonImperativeRoutingTriggers(\n  module: NgModuleRef<any>,\n  options: SingleSpaAngularOptions,\n): void {\n  if (!options.NavigationStart) {\n    // As discussed we don't do anything right now if the developer doesn't provide\n    // `options.NavigationStart` since this might be a breaking change.\n    return;\n  }\n\n  const router = module.injector.get(options.Router);\n  const subscription: Subscription = router.events.subscribe((event: any) => {\n    if (event instanceof options.NavigationStart!) {\n      const currentNavigation = router.getCurrentNavigation();\n      // This listener will be set up for each Angular application\n      // that has routing capabilities.\n      // We set `skipLocationChange` for each non-imperative navigation,\n      // Angular router checks under the hood if it has to change\n      // the browser URL or not.\n      // If `skipLocationChange` is truthy then Angular router will not call\n      // `setBrowserUrl()` which calls `history.replaceState()` and dispatches `popstate` event.\n      if (currentNavigation.trigger !== 'imperative') {\n        currentNavigation.extras.skipLocationChange = true;\n        currentNavigation.extras.replaceUrl = false;\n      }\n    }\n  });\n\n  module.onDestroy(() => {\n    subscription.unsubscribe();\n  });\n}\n","/**\n * The public api for consumers of single-spa-angular\n */\nexport * from './src/public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["core"],"mappings":"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"}